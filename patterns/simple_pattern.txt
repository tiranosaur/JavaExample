    Порождающие:
Singleton (Одиночка) - Порождающий. Ограничивает создание одного экземпляра класса, обеспечивает доступ к его единственному объекту.
Factory (Фабрика) -  Порождающий. Используется, когда у нас есть суперкласс с несколькими подклассами и на основе ввода, нам нужно вернуть один из подкласса.
Abstract Factory (Абстрактная фабрика) -  Порождающий. Используем супер фабрику для создания фабрики, затем используем созданную фабрику для создания объектов.
Builder (Строитель) -  Порождающий. Позволяет нам создавать различные виды объекта, избегая засорения конструктора.
Prototype (Прототип) -  Порождающий. Помогает создать дублированный объект с лучшей производительностью, вместо нового создается возвращаемый клон существующего объекта.
    Структурные:
Adapter (Адаптер) - Структурный. Это конвертер между двумя несовместимыми объектами. Используя паттерн адаптера, мы можем объединить два несовместимых интерфейса.
Composite (Компоновщик) - Структурный. Позволяет клиентам обрабатывать отдельные объекты и их композиции одинаковым образом. 
Proxy (Заместитель) - Структурный. Ппредставляет функциональность другого класса.
Flyweight (Легковес) - Структурный. Вместо создания большого количества похожих объектов, объекты используются повторно.
Facade (Фасад) - Структурный. Обеспечивает простой интерфейс для клиента, и клиент использует интерфейс для взаимодействия с системой. Фасад предоставляет упрощенный интерфейс для сложной системы. неколько действий над объектом в одном метода
Bridge (Мост) - Структурный. Делает конкретные классы независимыми от классов реализации интерфейса.
Decorator (Декоратор) - Структурный. Представляет способ изменения поведения объекта без создания подклассов.
    Поведенческие:
Template Method (Шаблонный метод) - Поведенческий. Определяющий основу алгоритма и позволяющий наследникам переопределять некоторые шаги алгоритма, не изменяя его структуру в целом.
Mediator (Посредник) - Поведенческий. Предоставляет класс посредника, который обрабатывает все коммуникации между различными классами.
Chain of Responsibility (Цепочка обязанностей) - Поведенческий. Позволяет избежать жесткой зависимости отправителя запроса от его получателя, при этом запрос может быть обработан несколькими объектами.
Observer (Наблюдатель) - Поведенческий. Позволяет одним обьектам следить и реагировать на события, происходящие в других объектах.
Strategy (Стратегия) - Поведенческий. Алгоритм стратегии может быть изменен во время выполнения программы. Позволяет переключаться между алгоритмами или стратегиями в зависимости от ситуации.
Command (Команда) - Поведенческий. Интерфейс который реализуется в классах которые управляют основный объектом
State (Состояние) - Поведенческий. Объект может изменять свое поведение в зависимости от его состояния.
Visitor (Посетитель) - Поведенческий. Используется для упрощения операций над группировками связанных объектов.
Interpreter (Интерпретатор) - Поведенческий. Определяет грамматику простого языка для проблемной области.
Iterator (Итератор) - Поведенческий. Последовательно осуществляет доступ к элементам объекта коллекции, не зная его основного представления.
Memento (Хранитель) - Поведенческий. Используется для хранения состояния объекта, позже это состояние можно восстановить.
